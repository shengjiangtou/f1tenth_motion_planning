        ################## DEBUG - Plotting the points" #############################
        # pos_raceline = np.array([wpts_x[target_index], wpts_y[target_index]])
        # plt.cla()
        # plt.plot(wpts_x, wpts_y, color='gray', linewidth=2.0)           #Plot Raceline
        # plt.plot(position_rear_axle[0], position_rear_axle[1], '.r')    #Plot Current vehicle position - rear axle
        # plt.plot(position_front_axle[0],position_front_axle[1], '.b')   #Plot Current vehicle position - front axle
        # plt.plot(nearest_point_front[0],nearest_point_front[1], '.c')   # Plot Nearest Point to rear axel -BILLY calculation
        # plt.plot(nearest_point_rear[0],nearest_point_rear[1], '.m')     # Plot Nearest Point to rear axel -BILLY calculation
        # plt.plot(pos_raceline[0], pos_raceline[1], '.g')  # Plot Nearest Point Stanley calculation
        ################## DEBUG - Plotting the points" #############################

        ############# Debug if loop ###########
        if self.debug_i < 100:
            self.debug_i=self.debug_i+1
            self.list1.append(ef[0])

        if self.debug_i == 100:
            test = 1
        ############# Debug if loop ###########





        # # Load waypoints
        # wpts = np.vstack((self.waypoints[:, self.conf.wpt_xind], self.waypoints[:, self.conf.wpt_yind])).T
        #
        # # Calculate Position of the rear axle and closest point to it
        # position_rear_axle = np.array([pose_x, pose_y])
        # nearest_point_rear, nearest_dist, t, i = nearest_point_on_trajectory(position_rear_axle, wpts)